{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Collectivo Documentation","text":""},{"location":"#a-modular-platform-for-your-community","title":"A modular platform for your community","text":"<p>Collectivo is an open-source framework for buildig community platforms. It allows you to create a digital space, where users can interact with each other and organize together. Thanks to its modular design, the platform is completely flexible and can include many different features. Good software for all! :)</p>"},{"location":"#get-in-touch","title":"Get in touch","text":"<p>If you are interested in using Collectivo or contributing to its development, please join the conversation on our Discord server, subscribe to our Newsletter, or write to info@collectivo.io.</p>"},{"location":"#technical-overview","title":"Technical overview","text":"<p>Collectivo consists of three key applications:</p> <ul> <li> <p>Community app: The heart of Collectivo, a digital plattform for your community - built with Nuxt. It is easy to customize and extend, multilingual, and mobile-friendly.</p> </li> <li> <p>Data studio: Collectivo uses Directus on the backend. This offers you a modern data studio to manage content, create visualizations, track changes, and automate workflows.</p> </li> <li> <p>Single sign-on: Collectivo uses Keycloak for identity and access management. This makes it possible for users to have only one account for multiple applications.</p> </li> </ul>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#features","title":"Features","text":"<ul> <li>Dashboard: Add dynamic tiles to the landing page of your platform.</li> <li>Messages: Create templates, send email campaigns, and schedule automated notifications to communicate with your users.</li> <li>Memberships: Create custom application forms, manage memberships, and let members manage their own data.</li> <li>Payments: Create and manage invoices.</li> <li>Your own ideas? Start creating your own custom features or get in touch.</li> </ul> <p>Currently under construction:</p> <ul> <li>Shifts: Coordinate working shifts within your community.</li> <li>Organizational structures: Represent working groups and roles of your organizations.</li> <li>Decision-making: Use the plattform for voting and collective decision-making processes.</li> </ul>"},{"location":"#documentation-structure","title":"Documentation structure","text":"<p>The rest of this documentation is structured as follows:</p> <ul> <li>Installation &amp; configuration: This guide is for administrators who want to install, configure, and publish a Collectivo platform for their community.</li> <li>Extension development: This guide is for developers who want to create custom extensions for the Collectivo platform.</li> <li>API Reference: Detailed technical documention.</li> </ul>"},{"location":"#about","title":"About","text":"<p>Collectivo is a collaboration of the Austrian cooperative MILA Mitmach-Supermarkt and the IT collective convive*. It has received funding by the AK Wien Digifonds in 2022.</p> <p></p>"},{"location":"configuration/","title":"Installation &amp; configuration","text":"<p>This guide is for administrators who want to install, configure, and publish a Collectivo platform for their community.</p>"},{"location":"configuration/#local-installation","title":"Local installation","text":"<p>The following steps show you how to set up your own local instance of Collectivo.</p> <p>Install the following requirements:</p> <ul> <li>git</li> <li>Docker</li> <li>pnpm</li> </ul> <p>Add the following to your <code>etc/hosts</code> file (here is a guide).</p> etc/hosts<pre><code>127.0.0.1 keycloak\n</code></pre> <p>Clone the quickstart repository (or start your own repository by creating a fork).</p> <pre><code>git clone https://github.com/collectivo-dev/collectivo-quickstart.git\n</code></pre> <p>Move into your new project folder.</p> <pre><code>cd collectivo-quickstart\n</code></pre> <p>Create an environment file.</p> <pre><code>cp .env.example .env\n</code></pre> <p>Build docker containers.</p> <pre><code>docker compose build\n</code></pre> <p>Start docker containers.</p> <pre><code>docker compose up -d\n</code></pre> <p>Install npm packages.</p> <pre><code>pnpm i\n</code></pre> <p>Start a development server for Collectivo.</p> <pre><code>pnpm dev\n</code></pre> <p>While Collectivo is running, in a separate terminal, apply migrations and example data.</p> <pre><code>pnpm seed\n</code></pre> <p>Go back to the previous terminal to see the migration logs.</p> <p>The following services should now be available:</p> <ul> <li>Collectivo (user app): http://localhost:3000/</li> <li>Directus (data studio): http://localhost:8055/</li> <li>Keycloak (access control): http://localhost:8080/admin/master/console/</li> </ul> <p>Log in with the following example users:</p> <ul> <li>Admin: admin@example.com / admin (Collectivo, Directus, Keycloak)</li> <li>Editor: editor@example.com / editor (Collectivo, Directus)</li> <li>User: user@example.com / user (Collectivo)</li> </ul>"},{"location":"configuration/#configuration","title":"Configuration","text":"<p>The main settings of Collectivo can be configured in <code>app.config.ts</code>.</p> collectivo/app.config.ts<pre><code>export default defineAppConfig({\n    collectivo: {\n        projectName: \"My project\",\n        projectDescription: \"Py project description\",\n        logoPath: \"/img/logo.png\",\n        sidebarWidth: 130, // Pixels\n        locales: [\"de\", \"en\"],\n    },\n});\n</code></pre> <p>The following settings can be configured in <code>collectivo/nuxt.config.ts</code>.</p> <ul> <li>Internationalization (see nuxt/i18n)<ul> <li>Change the default language: add <code>i18n: {defaultLocale: 'en'}</code> to <code>nuxt.config.ts</code>.</li> </ul> </li> </ul>"},{"location":"configuration/#add-your-own-logo","title":"Add your own logo","text":"<p>To add your own logo, place it in <code>collectivo/public/img/logo.png</code>. If you want to use a different path or filename, add the new path to <code>logoPath</code> in <code>collectivo/app.config.ts.</code>. The favicon can be defined in <code>collectivo/public/favicon.ico</code>.</p>"},{"location":"configuration/#add-an-extension","title":"Add an extension","text":"<p>To add an extension to Collectivo, add the name of the package in <code>package.json</code> and <code>nuxt.config.ts</code>. For more information, see Nuxt Layers.</p>"},{"location":"configuration/#develop-custom-features","title":"Develop custom features","text":"<p>You can adapt Collectivo to add your own custom functionality. See development for more information.</p>"},{"location":"configuration/#deploy-to-a-server","title":"Deploy to a server","text":"<p>To deploy Collectivo on a server, make sure to generate a new client secret in Keycloak and set fresh secrets in <code>.env</code>.</p> <p>To setup a docker container for Collectivo, uncomment the template provided in <code>docker-compose.yml</code>.</p> <p>You further need to set up a reverse proxy system and SSH certificates to make your instance of Collectivo publicly accessible.</p> <p>A working example of a deployment setup using nginxproxymanager can be found in mila-server.</p> <p>For further options on how to deploy a Nuxt app, see Nuxt Deployment.</p>"},{"location":"configuration/#installing-updates","title":"Installing updates","text":"<p>To keep your system up-to-date, you have to update the packages in <code>collectivo/package.json</code> and the services in <code>docker-compose.yml</code> to the latest versions and then re-build all containers. Make sure to create a backup before installing updates.</p> <p>Notes:</p> <ul> <li>To update javascript dependencies, run <code>pnpm update collectivo -L</code></li> <li>For Docker, see the latest versions of Directus and Keycloak </li> <li>The Keycloak version is set in <code>keycloak/Dockerfile</code></li> </ul>"},{"location":"development/","title":"Developing extensions","text":""},{"location":"development/#installation","title":"Installation","text":"<p>To set up an development environment, follow the instructions under local installation to create a local copy or fork of the quickstart repository. As an IDE, we recommend to use VSCode with the Postman, ESLint, Prettier, Tailwind, and Vue extensions.</p>"},{"location":"development/#overview","title":"Overview","text":"<p>The repository is structured as follows:</p> <ul> <li><code>collectivo</code> - Your custom extension of Collectivo</li> <li><code>directus</code> - Database &amp; data studio</li> <li><code>keycloak</code> - Identity &amp; access management</li> </ul> <p>For more information on the directory structure within <code>/collectivo</code>, check out Nuxt.</p>"},{"location":"development/#backend","title":"Backend","text":"<p>The <code>collectivo/server/</code> directory can be used to register your extension, define database schemas, and create API endpoints. For more information, see Nuxt server/ directory.</p>"},{"location":"development/#register-your-extension","title":"Register your extension","text":"<p>To register an extension within Collectivo, use <code>registerExtension()</code>. Here, you can also add database schemas and example data.</p> collectivo/server/plugins/setup.ts<pre><code>import pkg from \"../../package.json\";\nimport examples from \"../examples/examples\";\nimport mySchema from \"../schemas/mySchema\";\n\nexport default defineNitroPlugin(() =&gt; {\n    registerExtension({\n        name: \"myExtension\",\n        description: pkg.description,\n        version: pkg.version,\n        schemas: [mySchema],\n        examples: examples,\n    });\n});\n</code></pre> <p>The extension name hast to be unique and will be used by database. It should not include any underscores (<code>_</code>) and it is not possible to register to extensions with the same name.</p>"},{"location":"development/#understand-migrations","title":"Understand migrations","text":"<p>Migrations between schemas can be run via the Nuxt API endpoint <code>/api/migrate/</code>. Extensions can define a schema for each version. E.g. a schema can be for version <code>0.0.1</code> of the core extension <code>collectivo</code>. A migration script can be run both before and after applying each schema version.</p> <p></p> <p>Migration requests must be authorized with the <code>COLLECTIVO_API_TOKEN</code> from <code>.env</code>.</p> <p>The following parameters can be passed:</p> <ul> <li><code>extension (string)</code> - Apply migrations of a specific extension. If not given, all extensions will be migrated.</li> <li><code>version (string)</code> - Apply schemas towards specified version. If not given, migration will run up to the latest version.</li> <li><code>examples (boolean)</code> - Create example data (default false).</li> <li><code>isolated (boolean)</code> - Apply only the specified schema (if version is passed) or example data (if no version passed).</li> </ul> <p>Here is an example to prepare a new system for local development (the same code is run by <code>pnpm seed</code>):</p> <pre><code>curl --header \"Authorization: badToken\" --request POST \"http://localhost:3000/api/migrate/?examples=true\"\n</code></pre> <p>This cURL command can also be imported with an HTTP client like the VSCode Postman extension.</p>"},{"location":"development/#create-a-database-schema","title":"Create a database schema","text":"<p>An extension can define collections and fields for the database.</p> <p>Create a new schema file in <code>collectivo/server/schemas</code> and use <code>initschema()</code> to create a new <code>ExtensionSchema</code>. Set the name and version for your schema to the name and current version of your extension in <code>package.json</code>.</p> collectivo/server/schemas/mySchema.ts<pre><code>const schema = initSchema(\"myExtension\", \"0.0.1\");\n\nschema.collections = [\n    {\n        collection: \"example_collection\",\n        schema: { name: \"example_collection\" },\n    },\n];\n\nschema.fields = [\n    {\n        collection: \"example_collection\",\n        field: \"example_field\",\n        type: \"string\",\n        schema: {},\n        meta: {},\n    },\n];\n</code></pre> <p>Notes:</p> <ul> <li>The types for the schema follow the Directus SDK</li> <li>Database collections and fields should start with the name of the extension followed by an underscore to avoid name conflicts with other extensions. E.g. <code>myExtension_myCollection</code> and <code>myExtension_myField</code>.</li> <li>You can also add fields to collections that are not part of your extensions, like <code>directus_users</code>.</li> </ul>"},{"location":"development/#create-example-data","title":"Create example data","text":"<p>This function can be used to create example data for your extension:</p> collectivo/server/examples/examples.ts<pre><code>import { createItem, deleteItems } from \"@directus/sdk\";\n\nexport default async function examples() {\n    const directus = await useDirectusAdmin();\n\n    await directus.request(deleteItems(\"example_collection\", { limit: 1000 }));\n\n    await directus.request(\n        createItem(\"example_collection\", {\n            example_field: \"example_value\",\n        }),\n    );\n}\n</code></pre>"},{"location":"development/#create-hooks","title":"Create hooks","text":"<p>A hook is an automated workflow that can be used to trigger a Nuxt endpoint when a certain database event occures.</p> <p>To set up a hook, add a directus flow trigger to your schema:</p> collectivo/server/schemas/my_schema.ts<pre><code>const schema = initSchema(\"example\", \"0.0.1\");\nschema.createNuxtHook(\n    {\n        name: \"example_flow\",\n        status: \"active\",\n        accountability: \"all\",\n        trigger: \"event\",\n        options: {\n            type: \"action\",\n            scope: [\"items.update\"],\n            collections: [\"example_collection\"],\n        },\n    },\n    \"api/example\",\n);\n</code></pre> <p>The following flow will call the <code>api/example</code> script whenever an item in the <code>example_collection</code> is updated.</p> <p>For more information on directus flows, see Directus Flows.</p> <p>Then, create a correspondig Nuxt endpoint:</p> collectivo/server/api/example.post.s<pre><code>export default defineEventHandler(async (event) =&gt; {\n    // Protect this route with the .env variable COLLECTIVO_API_TOKEN\n    verifyCollectivoApiToken(event);\n    // Run your script here\n});\n</code></pre> <p>For more information on nuxt endpoints, see Nuxt API.</p> <p>If Directus cannot reach Nuxt in development mode, make sure that the Nuxt dev server is called with <code>dev --host</code>.</p>"},{"location":"development/#frontend","title":"Frontend","text":""},{"location":"development/#adjust-the-theme","title":"Adjust the theme","text":"<p>Collectivo uses <code>tailwindcss</code> and <code>nuxt-ui</code> for styling and components. The theme can be adapted in <code>tailwind.config.ts</code> and <code>app.config.ts</code>. The main layout can be overwritten by creating a file <code>collectivo/layouts/default</code> (see Nuxt layouts).</p>"},{"location":"development/#use-icons","title":"Use icons","text":"<p>Collectivo uses <code>UIcon</code> and <code>Iconify</code> to load icons. They have to be defined as <code>i-{collection_name}-{icon_name}</code>. By default, Collectivo uses the HeroIcons library. Additional libraries can be defined in <code>nuxt.config.ts</code>.</p>"},{"location":"development/#add-a-page","title":"Add a page","text":"<p>You can add custom pages in <code>collectivo/pages/</code>. It is recommended to use a namespace for your extension, such as <code>collectivo/pages/myextension/mypage</code>. This page will then be reachable under <code>http://localhost:3000/myextension/mypage</code>. For more information, see Nuxt pages.</p> <p>To only allow authenticated users on a page, add the following middleware to the setup script. If Keycloak is used, this will forward people directly to Keycloak, using Directus' Seamless SSO feature.</p> collectivo/pages/myextension/mypage<pre><code>definePageMeta({\n    middleware: [\"auth\"],\n});\n</code></pre> <p>To change the title on your page, use <code>setCollectivoTitle()</code>:</p> collectivo/pages/myextension/mypage<pre><code>setCollectivoTitle(\"Dashboard\");\n</code></pre>"},{"location":"development/#add-a-menu-item","title":"Add a menu item","text":"<p>Use <code>useCollectivoMenus()</code> to add menu items. Use a [Nuxt plugin] to register the menu item when the app is initialized.</p> my-extension/plugins/setup.ts<pre><code>export default defineNuxtPlugin(() =&gt; {\n  const menu = useCollectivoMenus();\n  menu.value.main.push({\n    label: \"My menu item\",\n    icon: \"i-heroicons-star\",\n    to: \"/myextension/mypage\",\n    order: 100\n  });\n}\n</code></pre> <p>There are two menus by default:</p> <ul> <li><code>main</code>: Shown for authenticated users.</li> <li><code>public</code>: Shown for unauthenticated users.</li> </ul>"},{"location":"development/#create-a-dashboard-tile","title":"Create a dashboard tile","text":"<p>Tiles are defined in the database collection <code>collectivo_tiles</code>. If you want your tile to just display text, you can simply create a new dashboard tile in the database. You can also create dynamic components that can be displayed inside a dashboard tile. To do so, create a new component file <code>components/global/</code>. Then, add a new dashboard tile to your database and set the field <code>Component</code> to the name of your tile.</p>"},{"location":"development/#further-topics","title":"Further topics","text":""},{"location":"development/#add-database-types","title":"Add database types","text":"<p>To add types of your database schema to the directus client, corresponding to your database schema on the backend:</p> collectivo/index.d.ts<pre><code>declare global {\n    interface CollectivoSchema {\n        example_collection: ExampleCollection[];\n    }\n\n    interface ExampleCollection {\n        id: number;\n        example_field: string;\n    }\n}\n\nexport {};\n</code></pre> <p>You can then enjoy type checking when using directus:</p> <pre><code>const directus = useDirectus();\nconst data = await directus.request(readItems(\"example_collection\"));\n</code></pre> <p>Typescript will then know that data is a <code>ExampleCollection[]</code> and that <code>data[0].example_field</code> is a string.</p>"},{"location":"development/#publish-your-extension-as-a-package","title":"Publish your extension as a package","text":"<p>You can share your custom functionality with others by creating an extension of Collectivo as an npm package. The code within <code>/collectivo</code> will then be packaged as a Layer that can be installed as an extension by other users of Collectivo.</p> <p>To do so, configure the name, version, author, and license in <code>collectivo/package.json</code> and set <code>private:false</code>.</p> <p>It is recommended to start the package name with <code>collectivo-</code> to make it easier to find by others users of Collectivo, e.g.: <code>collectivo-my-extension</code>.</p> <p>Then, publish your extension on npm.</p> <pre><code>pnpm publish -r --access=public\n</code></pre>"},{"location":"development/#format-your-code","title":"Format your code","text":"<p>Run the following commands to ensure a consistent style in your code. You can install the Prettier and ESLint extensions in VSCode to do this automatically.</p> <ul> <li>To run linting checks, use: <code>pnpm lint</code></li> <li>To apply linting to all files, use: <code>pnpm lint:fix</code></li> <li>To run formatting checks, use: <code>pnpm format</code></li> <li>To apply formatting to all files, use: <code>pnpm format:fix</code></li> </ul>"},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#frontend","title":"Frontend","text":"<p>The following composables are available for frontend development.</p>"},{"location":"reference/#setcollectivotitle","title":"<code>setCollectivoTitle</code>","text":"<p><code>setCollectivoTitle(title: string)</code></p> <p>Use in a page to set a page title for both the visible header and the metadata.</p>"},{"location":"reference/#usedirectus","title":"<code>useDirectus</code>","text":"<p><code>useDirectus(): DirectusClient</code></p> <p>Access the directus client to interact with the database.</p>"},{"location":"reference/#usecollectivouser","title":"<code>useCollectivoUser</code>","text":"<p><code>useCollectivoUser(): UserStore</code></p> <p>Store for data of the currently authenticated user, with the following attributes:</p> <ul> <li><code>data: CollectivoUser | null</code></li> <li><code>inputs: CollectivoUserInput[]</code> -&gt; Can be used to add fields to the profile section</li> <li><code>isAuthenticated: boolean</code></li> <li><code>saving: boolean</code></li> <li><code>loading: boolean</code></li> <li><code>error: unknown</code></li> <li><code>load: (force: boolean = false) =&gt; Promise&lt;UserStore&gt;</code> -&gt; Fetch user data</li> <li><code>save: (data: CollectivoUser) =&gt; Promise&lt;UserStore&gt;</code> -&gt; Update user data</li> </ul>"},{"location":"reference/#usecollectivomenus","title":"<code>useCollectivoMenus</code>","text":"<p><code>useCollectivoMenus(): Ref&lt;CollectivoMenus&gt;</code></p> <p>This composable can be used to add or adapt menu items.</p> <p>There are four menus in <code>CollectivoMenus</code>:</p> <ul> <li><code>main</code>: Left sidebar, shown for authenticated users.</li> <li><code>main_public</code>: Left sidebar, shown for public users.</li> <li><code>profile</code>: Top right profile icon, shown for authenticated users.</li> <li><code>profile_public</code>: Top right profile icon, shown for public users.</li> </ul> <p>Attributes:</p> <ul> <li><code>label: string</code> - Will be shown next to the icon.</li> <li><code>icon: string</code> - Icon to be used (see icons)</li> <li><code>to: string</code> - A path like <code>/my/path</code> or <code>https://externallink.com</code></li> <li><code>external: boolan</code> - If true, path will be interepreted as an external URL.</li> <li><code>hideOnMobile: boolean</code> - If true, item will not be shown on small screens.</li> <li><code>target: string</code> - Target attribute of the link.</li> <li><code>click: Function</code> - Click attribute of the link.</li> <li><code>filter: (item: CollectivoMenuItem) =&gt; boolean</code> - Show item only if this function returns <code>true</code>.</li> </ul>"},{"location":"reference/#collectivoformbuilder","title":"<code>CollectivoFormBuilder</code>","text":"<p>This component can be used to build forms.</p> <p>Attributes:</p> <ul> <li><code>data: Record&lt;string, any&gt;</code>: Data to populate the initial form</li> <li><code>fields: CollectivoFormField[]</code>: Defines the structure of the form</li> <li><code>submit: (data: Record&lt;string, any&gt;) =&gt; Promise&lt;void&gt;</code>: Function to be called when form is submitted</li> <li><code>submit-label: string</code>: Label of the submit button</li> </ul> <p>To see the different possible form fields, check out the available types of <code>CollectivoFormField</code> in <code>index.d.ts</code>.</p>"},{"location":"reference/#backend","title":"Backend","text":"<p>The following utility functions can be used for server-side scripts (within <code>/my-extension/server/</code>)</p>"},{"location":"reference/#registerextension","title":"<code>registerExtension</code>","text":"<p><code>registerExtension({name: string, description:string, version:string, schemas:ExtensionSchema[], examples: ()=&gt;Promise&lt;void&gt;})</code></p> <p>Registers a function within the runtime of the backend server, being able to multiple schemas for different versions of the extension as well as a function to create example data.</p>"},{"location":"reference/#initschema","title":"<code>initSchema</code>","text":"<p><code>initSchema(extension: string, version: string, options: ExtensionSchemaOptions): ExtensionSchema</code></p> <p>Initiates a new ExtensionSchema that can be used to define the database structure and migrations of your extension (see migrations). Can be applied as follows and added to <code>registerExtension</code>.</p>"},{"location":"reference/#extensionschema","title":"<code>ExtensionSchema</code>","text":"<p>This class has the following attributes:</p> <ul> <li><code>extension</code>: String. Name of the extension.</li> <li><code>version</code>: String. The semantic version of the extension that this schema represents.</li> <li><code>dependencies</code>: Array of <code>ExtensionDependency</code>.</li> <li><code>run_before</code>: Async function. Custom migration script to be run before applying this schema version</li> <li><code>run_after</code>: Async function. Custom migration script to be run after applying this schema version</li> <li><code>collections</code>: Array of <code>DirectusCollection</code>.</li> <li><code>fields</code>: Array of <code>DirectusField</code>.</li> <li><code>relations</code>: Array of <code>DirectusRelation</code>. See also the methods below.</li> <li><code>roles</code>: Array of <code>DirectusRole</code>.</li> <li><code>permissions</code>: Array of <code>DirectusPermission</code>.</li> <li><code>flows</code>: Array of <code>DirectusFlowWrapper</code>. Define automated workflows.</li> <li><code>translations</code>: Array of <code>DirectusTranslation</code></li> </ul> <p>And the following methods:</p> <ul> <li><code>createO2MRelation()</code> - Utility method to create a One-to-Many relationship</li> <li><code>createM2MRelation()</code> - Utility method to create a Many-to_many relationship</li> <li><code>createM2ARelation()</code> - Utility method to create a Many-to-Any relationship</li> <li><code>createNuxtHook()</code> - Utility method to create a flow that will send a post request to a Nuxt API endpoint when it is triggered.</li> </ul>"},{"location":"reference/#extensiondependency","title":"<code>ExtensionDependency</code>","text":"<p>This type can be used to define dependencies of a schema on another extension.</p> <p>Attributes:</p> <ul> <li><code>extension</code>: String. The extension that the schema depends on.</li> <li><code>version</code>: String. The semantic version of the extension that the schema depends on.</li> </ul>"},{"location":"reference/#directusflowwrapper","title":"<code>DirectusFlowWrapper</code>","text":"<p>This type can be used to construct directus flows in a schema.</p> <p>Attributes:</p> <ul> <li><code>flow: Partial&lt;DirectusFlow&lt;&lt;any&gt;&gt;</code> - this will define the trigger, see directus flow</li> <li><code>firstOperation: string</code> - key of the initial operation to be performed</li> <li><code>operations: DirectusOperationWrapper[]</code> - define a list of connected operations</li> </ul>"},{"location":"reference/#directusoperationwrapper","title":"<code>DirectusOperationWrapper</code>","text":"<p>This type can be used to define operations within DirectusFlowWrapper.</p> <p>Attributes:</p> <ul> <li><code>operation: Partial&lt;DirectusOperation&lt;&lt;any&gt;&gt;</code> - see directus operation</li> <li><code>resolve: string</code> - key of the operation to execute when this one is resolved</li> <li><code>reject: string</code> - key of the operation to execute when this one is rejected</li> </ul>"},{"location":"reference/#usedirectusadmin","title":"<code>useDirectusAdmin</code>","text":"<p><code>useDirectusAdmin(): DirectusClient</code></p> <p>Access the directus client with admin access.</p>"},{"location":"reference/#verifycollectivoapitoken","title":"<code>verifyCollectivoApiToken</code>","text":"<p>Function to protect API endpoints. Requests need to attach the API token from <code>.env</code> in the authorization header.</p>"},{"location":"reference/#logger","title":"<code>logger</code>","text":"<p>You can use winston to write information to the nuxt logs (<code>console.log</code> will not appear in production), e.g.:</p> <pre><code>logger.info(\"Hello world!\");\n</code></pre>"}]}